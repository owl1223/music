{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u95EB\\u97E9\\u8001\\u5E08\\\\\\u7B2C\\u5341\\u56DB\\u5468\\\\\\u7B2C\\u56DB\\u5929\\\\\\u5B8C\\u6574\\u97F3\\u4E50\\u64AD\\u653E\\u5668\\\\src\\\\components\\\\ControlBox.js\";\nimport React, { Component } from 'react';\nimport \"./ControlBox.css\";\nimport { Slider, Icon, Popover } from 'antd';\nimport { connect } from \"react-redux\";\nimport { setPlaying, setCurrentTime, setCurrentPlayIndex, setRndList, setPlayer, queryLyric } from \"../store/actions.js\";\n\nclass ControlBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.playBtnClick = () => {\n      // 点击播放按钮之后，先判断当前是否正在播放，如果正在播放则暂停。如果是暂停状态则开始播放。\n      if (this.props.playing) {\n        // pause方法，用于暂停播放\n        this.player.current.pause();\n      } else {\n        // audio对象的play()方法，用于开始播放，如果已经正在播放则无效。\n        this.player.current.play();\n      }\n    };\n\n    this.gotoNextSong = () => {\n      this.player.current.pause();\n      let index = 0;\n\n      switch (this.props.playStyle) {\n        case \"normal\":\n        case \"single\":\n          index = this.props.currentPlayIndex + 1;\n\n          if (index >= this.props.musicList.length) {\n            index = 0;\n          }\n\n          this.props.setCurrentPlayIndex(index);\n          break;\n\n        case \"random\":\n          let ind = Math.floor(Math.random() * this.props.rndList.length);\n          index = this.props.rndList[ind];\n          this.props.rndList.splice(ind, 1);\n\n          if (this.props.rndList.length <= 0) {\n            this.props.setRndList(this.props.musicList.map((e, i) => {\n              return i;\n            }));\n          }\n\n          this.props.setCurrentPlayIndex(index);\n          break;\n\n        default:\n          break;\n      }\n\n      setTimeout(() => {\n        this.player.current.play();\n      }, 100);\n    };\n\n    this.gotoPrevSong = () => {\n      let index = this.props.currentPlayIndex - 1;\n\n      if (index < 0) {\n        index = this.props.musicList.length - 1;\n      }\n\n      this.props.setCurrentPlayIndex(index);\n      setTimeout(() => {\n        this.player.current.play();\n      }, 100);\n    };\n\n    this.playTimeChange = e => {\n      let time = this.player.current.duration * (e / 100); // 手动设置currentTime也会触发timeupdate事件。\n\n      this.player.current.currentTime = time;\n    };\n\n    this.volumnChange = e => {\n      this.player.current.volume = e / 100;\n    };\n\n    this.state = {\n      progreeNum: 0,\n      musicDuration: \"00:00\" // 把audio对象存入组件对象中\n\n    };\n    this.player = React.createRef();\n  }\n\n  render() {\n    let soundControl = React.createElement(\"div\", {\n      style: {\n        height: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      vertical: true,\n      defaultValue: 100,\n      onChange: this.volumnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"control-box-root\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"control-box-progress-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      value: this.state.progreeNum,\n      onChange: this.playTimeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"control-box-time-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.secondToMinuteStr(this.props.currentTime), \"/\", this.state.musicDuration)), React.createElement(\"div\", {\n      className: \"control-box-control-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"step-backward\",\n      className: \"control-box-icon\",\n      onClick: this.gotoPrevSong,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: this.props.playing ? \"pause-circle\" : \"play-circle\",\n      className: \"control-box-icon\",\n      onClick: this.playBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"step-forward\",\n      className: \"control-box-icon\",\n      onClick: this.gotoNextSong,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Popover, {\n      placement: \"top\",\n      content: soundControl,\n      trigger: \"click\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"sound\",\n      className: \"control-box-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(\"audio\", {\n      preload: \"true\",\n      src: \"/music/\".concat(this.props.musicList[this.props.currentPlayIndex], \".mp3\"),\n      ref: this.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n  componentDidMount() {\n    // 把播放器对象放入store中\n    this.props.setPlayer(this.player.current); // audio元素的onpause事件，当播放暂停是触发\n\n    this.player.current.onpause = () => {\n      this.props.setPlaying(false);\n    }; // 当歌曲可以播放时，就开始下载歌词\n\n\n    this.player.current.oncanplay = () => {\n      // console.log(\"准备就绪了\");\n      let _this$props = this.props,\n          musicList = _this$props.musicList,\n          currentPlayIndex = _this$props.currentPlayIndex;\n      this.props.queryLyric(\"/music/\".concat(musicList[currentPlayIndex], \".lrc\"));\n    };\n\n    this.player.current.onplay = () => {\n      this.props.setPlaying(true);\n    }; // ontimeupdate，当播放进度更新时触发，是频繁触发的事件。\n\n\n    this.player.current.ontimeupdate = () => {\n      let pn = this.player.current.currentTime / this.player.current.duration;\n      this.setState({\n        progreeNum: Math.round(pn * 100),\n        musicDuration: this.secondToMinuteStr(this.player.current.duration)\n      });\n      this.props.setCurrentTime(this.player.current.currentTime);\n    };\n\n    this.player.current.onended = () => {\n      // console.log(\"结束了\");\n      if (this.props.playStyle === \"single\") {\n        this.player.current.play();\n      } else {\n        this.gotoNextSong();\n      }\n    };\n  } // 下一首\n\n\n  secondToMinuteStr(second) {\n    let m = Math.floor(second / 60);\n    let s = Math.round(second % 60);\n    m = m < 10 ? \"0\" + m : m;\n    s = s < 10 ? \"0\" + s : s;\n    return m + \":\" + s;\n  }\n\n}\n\nexport default connect(state => {\n  return {\n    playing: state.playing,\n    currentTime: state.currentTime,\n    playStyle: state.playStyle,\n    musicList: state.musicList,\n    currentPlayIndex: state.currentPlayIndex,\n    rndList: state.rndList\n  };\n}, dispatch => {\n  return {\n    setPlaying(f) {\n      dispatch(setPlaying(f));\n    },\n\n    setCurrentTime(v) {\n      dispatch(setCurrentTime(v));\n    },\n\n    setCurrentPlayIndex(v) {\n      dispatch(setCurrentPlayIndex(v));\n    },\n\n    setRndList(v) {\n      dispatch(setRndList(v));\n    },\n\n    setPlayer(p) {\n      dispatch(setPlayer(p));\n    },\n\n    queryLyric(url) {\n      dispatch(queryLyric(url));\n    }\n\n  };\n})(ControlBox);","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\闫韩老师\\第十四周\\第四天\\完整音乐播放器\\src\\components\\ControlBox.js"],"names":["React","Component","Slider","Icon","Popover","connect","setPlaying","setCurrentTime","setCurrentPlayIndex","setRndList","setPlayer","queryLyric","ControlBox","constructor","props","playBtnClick","playing","player","current","pause","play","gotoNextSong","index","playStyle","currentPlayIndex","musicList","length","ind","Math","floor","random","rndList","splice","map","e","i","setTimeout","gotoPrevSong","playTimeChange","time","duration","currentTime","volumnChange","volume","state","progreeNum","musicDuration","createRef","render","soundControl","height","secondToMinuteStr","componentDidMount","onpause","oncanplay","onplay","ontimeupdate","pn","setState","round","onended","second","m","s","dispatch","f","v","p","url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./ControlBox.css\";\r\n\r\nimport { Slider,Icon,Popover } from 'antd';\r\n\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nimport {\r\n    setPlaying,\r\n    setCurrentTime,\r\n    setCurrentPlayIndex,\r\n    setRndList,\r\n    setPlayer,\r\n    queryLyric\r\n} from \"../store/actions.js\";\r\n\r\n\r\nclass ControlBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            progreeNum:0,\r\n            musicDuration:\"00:00\",\r\n        }\r\n        // 把audio对象存入组件对象中\r\n        this.player = React.createRef();\r\n    }\r\n    render() { \r\n\r\n        let soundControl = (\r\n            <div style={{height:\"100px\"}}>\r\n                <Slider \r\n                    vertical \r\n                    defaultValue={100}\r\n                    onChange={this.volumnChange}\r\n                ></Slider>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div className=\"control-box-root\">\r\n                <div className=\"control-box-progress-bar\">\r\n                    <Slider \r\n                        value={this.state.progreeNum}\r\n                        onChange={this.playTimeChange}\r\n                    ></Slider>\r\n                    <p className=\"control-box-time-label\">{\r\n                        this.secondToMinuteStr(this.props.currentTime)\r\n                    }/\r\n                    {this.state.musicDuration}</p>\r\n                </div>\r\n                <div className=\"control-box-control-bar\">\r\n                    <Icon type=\"step-backward\"\r\n                        className=\"control-box-icon\"\r\n                        onClick={this.gotoPrevSong}\r\n                    />\r\n                    <Icon \r\n                        type={this.props.playing?\"pause-circle\":\"play-circle\"}\r\n                        className=\"control-box-icon\"\r\n                        onClick={this.playBtnClick}\r\n                    />\r\n                    <Icon \r\n                        type=\"step-forward\" \r\n                        className=\"control-box-icon\"\r\n                        onClick={this.gotoNextSong}\r\n                    />\r\n                    <Popover placement=\"top\" content={soundControl} trigger=\"click\">\r\n                        <Icon \r\n                            type=\"sound\" \r\n                            className=\"control-box-icon\"\r\n                        />\r\n                    </Popover>\r\n                    \r\n                </div>\r\n\r\n                {/* audio标签，用于播放音频，src属性设置播放的音频数据源，autoplay属性设置页面加载完成后自动播放(部分浏览器禁止自动播放功能)。loop属性设置音频播放完毕之后自动重新播放。controls属性用于显示播放器控制条。 */}\r\n                <audio \r\n                    preload=\"true\" \r\n                    src={`/music/${this.props.musicList[this.props.currentPlayIndex]}.mp3`} \r\n                    ref={this.player}\r\n                >\r\n                </audio>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    playBtnClick = ()=>{\r\n        // 点击播放按钮之后，先判断当前是否正在播放，如果正在播放则暂停。如果是暂停状态则开始播放。\r\n        if(this.props.playing){\r\n            // pause方法，用于暂停播放\r\n            this.player.current.pause();\r\n        }else{\r\n            // audio对象的play()方法，用于开始播放，如果已经正在播放则无效。\r\n            this.player.current.play();\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        // 把播放器对象放入store中\r\n        this.props.setPlayer(this.player.current);\r\n\r\n        // audio元素的onpause事件，当播放暂停是触发\r\n        this.player.current.onpause = ()=>{\r\n            this.props.setPlaying(false);\r\n        }\r\n\r\n        // 当歌曲可以播放时，就开始下载歌词\r\n        this.player.current.oncanplay = ()=>{\r\n            // console.log(\"准备就绪了\");\r\n            let {musicList,currentPlayIndex} = this.props;\r\n            this.props.queryLyric(`/music/${musicList[currentPlayIndex]}.lrc`);\r\n        }\r\n\r\n        this.player.current.onplay = ()=>{\r\n            this.props.setPlaying(true);\r\n        }\r\n\r\n        // ontimeupdate，当播放进度更新时触发，是频繁触发的事件。\r\n        this.player.current.ontimeupdate = ()=>{\r\n            let pn = this.player.current.currentTime/this.player.current.duration;\r\n\r\n            this.setState({\r\n                progreeNum:Math.round(pn*100),\r\n                musicDuration:this.secondToMinuteStr(this.player.current.duration)\r\n            });\r\n\r\n            this.props.setCurrentTime(this.player.current.currentTime);\r\n        }\r\n\r\n        this.player.current.onended = ()=>{\r\n            // console.log(\"结束了\");\r\n            if(this.props.playStyle===\"single\"){\r\n                this.player.current.play();\r\n            }else{\r\n                this.gotoNextSong();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // 下一首\r\n    gotoNextSong = ()=>{\r\n        this.player.current.pause();\r\n        let index = 0;\r\n        switch (this.props.playStyle) {\r\n            case \"normal\":\r\n            case \"single\":\r\n                index = this.props.currentPlayIndex+1;\r\n                if(index>=this.props.musicList.length){\r\n                    index = 0;\r\n                }\r\n                this.props.setCurrentPlayIndex(index);\r\n                break;\r\n            case \"random\":\r\n                let ind = Math.floor(Math.random()*this.props.rndList.length);\r\n                index = this.props.rndList[ind];\r\n                this.props.rndList.splice(ind,1);\r\n                if(this.props.rndList.length<=0){\r\n                    this.props.setRndList(this.props.musicList.map((e,i)=>{\r\n                        return i;\r\n                    }));\r\n                }\r\n                this.props.setCurrentPlayIndex(index);\r\n                break;\r\n            \r\n                \r\n        \r\n            default:\r\n                break;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.player.current.play();\r\n        }, 100);\r\n    }\r\n\r\n    // 上一首\r\n    gotoPrevSong = ()=>{\r\n        let index = this.props.currentPlayIndex-1;\r\n        if(index<0){\r\n            index = this.props.musicList.length-1;\r\n        }\r\n        this.props.setCurrentPlayIndex(index);\r\n\r\n        setTimeout(() => {\r\n            this.player.current.play();\r\n        }, 100);\r\n    }\r\n\r\n    secondToMinuteStr(second){\r\n        let m = Math.floor(second/60);\r\n        let s = Math.round(second%60);\r\n        m = m<10?\"0\"+m:m;\r\n        s = s<10?\"0\"+s:s;\r\n        return m+\":\"+s;\r\n    }\r\n\r\n    playTimeChange = e=>{\r\n        let time = this.player.current.duration*(e/100);\r\n\r\n        // 手动设置currentTime也会触发timeupdate事件。\r\n        this.player.current.currentTime = time;\r\n    }\r\n\r\n    volumnChange = e=>{\r\n        this.player.current.volume = e/100;\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(\r\n    state=>{\r\n        return {\r\n            playing:state.playing,\r\n            currentTime:state.currentTime,\r\n            playStyle:state.playStyle,\r\n            musicList:state.musicList,\r\n            currentPlayIndex:state.currentPlayIndex,\r\n            rndList:state.rndList\r\n        }\r\n    },\r\n    dispatch=>{\r\n        return {\r\n            setPlaying(f){\r\n                dispatch(setPlaying(f));\r\n            },\r\n            setCurrentTime(v){\r\n                dispatch(setCurrentTime(v));\r\n            },\r\n            setCurrentPlayIndex(v){\r\n                dispatch(setCurrentPlayIndex(v));\r\n            },\r\n            setRndList(v){\r\n                dispatch(setRndList(v));\r\n            },\r\n            setPlayer(p){\r\n                dispatch(setPlayer(p));\r\n            },\r\n            queryLyric(url){\r\n                dispatch(queryLyric(url));\r\n            }\r\n        }\r\n    }\r\n)(ControlBox);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}