{"ast":null,"code":"var _jsxFileName = \"D:\\\\h5-50\\u671F\\\\\\u7B2C\\u5341\\u56DB\\u5468\\\\\\u7B2C\\u56DB\\u5929\\\\\\u5B8C\\u6574\\u97F3\\u4E50\\u64AD\\u653E\\u5668\\\\src\\\\components\\\\LyricBox.js\";\nimport React, { Component } from 'react';\nimport \"./LyricBox.css\";\nimport { connect } from \"react-redux\";\n\nclass LyricBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.lineClick = index => {\n      this.props.player.currentTime = this.props.lyric[index].time + 0.2;\n    };\n\n    this.state = {\n      line: 0\n    };\n    this.lyricBox = new React.createRef();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.lyricBox,\n      className: \"lyric-box-root\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, this.props.lyric.map((l, i) => {\n      return React.createElement(\"p\", {\n        key: i,\n        className: \"lyric-box-line \".concat(this.state.line === i ? \"lyric-box-highline\" : \"\"),\n        onClick: () => this.lineClick(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, l.content || \"-\");\n    }));\n  }\n\n  // 当组件接受到传值或传值更新时调用。\n  componentWillReceiveProps(props) {\n    // console.log(props.currentTime);\n    // 找到当前时间对应的歌词\n    let index = null;\n\n    for (let i = 0; i < props.lyric.length; i++) {\n      if (props.lyric[i].time >= props.currentTime) {\n        index = i - 1;\n        break;\n      }\n    }\n\n    if (index !== this.state.line) {\n      if (index === null) {\n        index = props.lyric.length - 1;\n      }\n\n      let lines = index - 4;\n      lines = lines < 0 ? 0 : lines;\n      let target = 45 * lines;\n      target = target < 0 ? 0 : target;\n      let maxoffset = this.lyricBox.current.scrollHeight - this.lyricBox.current.clientHeight;\n      target = target > maxoffset ? maxoffset : target;\n      let distance = target - this.lyricBox.current.scrollTop;\n      let velocity = distance / 30;\n      let count = 0;\n\n      let update = () => {\n        count++;\n        this.lyricBox.current.scrollTop += velocity;\n        let diff = Math.abs(this.lyricBox.current.scrollTop - target); // console.log(diff,Math.abs(velocity));\n\n        if (diff > Math.abs(velocity) && count < 30) {\n          requestAnimationFrame(update);\n        } else {\n          this.lyricBox.current.scrollTop = target;\n        }\n      };\n\n      if (distance !== 0) {\n        requestAnimationFrame(update);\n      }\n    }\n\n    this.setState({\n      line: index\n    });\n  }\n\n}\n\nexport default connect(state => {\n  return {\n    lyric: state.lyric,\n    currentTime: state.currentTime,\n    player: state.player\n  };\n}, dispatch => {\n  return {};\n})(LyricBox);","map":{"version":3,"sources":["D:\\h5-50期\\第十四周\\第四天\\完整音乐播放器\\src\\components\\LyricBox.js"],"names":["React","Component","connect","LyricBox","constructor","props","lineClick","index","player","currentTime","lyric","time","state","line","lyricBox","createRef","render","map","l","i","content","componentWillReceiveProps","length","lines","target","maxoffset","current","scrollHeight","clientHeight","distance","scrollTop","velocity","count","update","diff","Math","abs","requestAnimationFrame","setState","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./LyricBox.css\";\r\n\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass LyricBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            line:0\r\n        }\r\n        this.lyricBox = new React.createRef();\r\n    }\r\n    render() { \r\n        return (\r\n            <div ref={this.lyricBox} className=\"lyric-box-root\">\r\n                {this.props.lyric.map((l,i)=>{\r\n                    return (\r\n                        <p \r\n                            key={i} \r\n                            className={\r\n                                `lyric-box-line ${this.state.line===i?\"lyric-box-highline\":\"\"}`\r\n                            }\r\n                            onClick={()=>this.lineClick(i)}\r\n                        >{l.content||\"-\"}</p>\r\n                    )\r\n                })}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    lineClick = index=>{\r\n        this.props.player.currentTime = this.props.lyric[index].time+0.2;\r\n    }\r\n\r\n\r\n    // 当组件接受到传值或传值更新时调用。\r\n    componentWillReceiveProps(props){\r\n        // console.log(props.currentTime);\r\n        // 找到当前时间对应的歌词\r\n        let index = null;\r\n        for(let i = 0;i<props.lyric.length;i++){\r\n            if(props.lyric[i].time>=props.currentTime){\r\n                index = i-1;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(index!==this.state.line){\r\n            if(index===null){\r\n                index = props.lyric.length-1;\r\n            }\r\n            let lines = index-4;\r\n            lines = lines<0?0:lines;\r\n\r\n            let target = 45*lines;\r\n            target = target<0?0:target;\r\n            let maxoffset = this.lyricBox.current.scrollHeight - this.lyricBox.current.clientHeight;\r\n            target = target>maxoffset?maxoffset:target;\r\n        \r\n            let distance = target - this.lyricBox.current.scrollTop;\r\n            \r\n            let velocity = distance/30;\r\n            \r\n            let count = 0;\r\n\r\n            let update = ()=>{\r\n                count++;\r\n                this.lyricBox.current.scrollTop += velocity;\r\n                let diff = Math.abs(this.lyricBox.current.scrollTop-target);\r\n                // console.log(diff,Math.abs(velocity));\r\n                if(diff>Math.abs(velocity)&&count<30){\r\n                    requestAnimationFrame(update);\r\n                }else{\r\n                    this.lyricBox.current.scrollTop = target\r\n                }\r\n            }\r\n            if(distance!==0){\r\n                requestAnimationFrame(update);\r\n            }\r\n        }\r\n        this.setState({line:index});\r\n\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state=>{\r\n        return {\r\n            lyric:state.lyric,\r\n            currentTime:state.currentTime,\r\n            player:state.player\r\n        }\r\n    },\r\n    dispatch=>{\r\n        return {\r\n\r\n        }\r\n    }\r\n)(LyricBox);\r\n\r\n"]},"metadata":{},"sourceType":"module"}